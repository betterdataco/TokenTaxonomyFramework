// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: taxonomy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IWA.TTF.Taxonomy.Model {

  /// <summary>Holder for reflection information generated from taxonomy.proto</summary>
  public static partial class TaxonomyReflection {

    #region Descriptor
    /// <summary>File descriptor for taxonomy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaxonomyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg50YXhvbm9teS5wcm90bxIOdGF4b25vbXkubW9kZWwaCmNvcmUucHJvdG8a",
            "DmFydGlmYWN0LnByb3RvIv4ICghUYXhvbm9teRIwCgd2ZXJzaW9uGAEgASgL",
            "Mh8udGF4b25vbXkubW9kZWwuVGF4b25vbXlWZXJzaW9uEkYKEGJhc2VfdG9r",
            "ZW5fdHlwZXMYAiADKAsyLC50YXhvbm9teS5tb2RlbC5UYXhvbm9teS5CYXNl",
            "VG9rZW5UeXBlc0VudHJ5EjoKCWJlaGF2aW9ycxgDIAMoCzInLnRheG9ub215",
            "Lm1vZGVsLlRheG9ub215LkJlaGF2aW9yc0VudHJ5EkUKD2JlaGF2aW9yX2dy",
            "b3VwcxgEIAMoCzIsLnRheG9ub215Lm1vZGVsLlRheG9ub215LkJlaGF2aW9y",
            "R3JvdXBzRW50cnkSQQoNcHJvcGVydHlfc2V0cxgFIAMoCzIqLnRheG9ub215",
            "Lm1vZGVsLlRheG9ub215LlByb3BlcnR5U2V0c0VudHJ5EkkKEXRlbXBsYXRl",
            "X2Zvcm11bGFzGAYgAygLMi4udGF4b25vbXkubW9kZWwuVGF4b25vbXkuVGVt",
            "cGxhdGVGb3JtdWxhc0VudHJ5Ek8KFHRlbXBsYXRlX2RlZmluaXRpb25zGAcg",
            "AygLMjEudGF4b25vbXkubW9kZWwuVGF4b25vbXkuVGVtcGxhdGVEZWZpbml0",
            "aW9uc0VudHJ5EjsKGHRva2VuX3RlbXBsYXRlX2hpZXJhcmNoeRgIIAEoCzIZ",
            "LnRheG9ub215Lm1vZGVsLkhpZXJhcmNoeRJACg9mb3JtdWxhX2dyYW1tYXIY",
            "CSABKAsyJy50YXhvbm9teS5tb2RlbC5hcnRpZmFjdC5Gb3JtdWxhR3JhbW1h",
            "chpQChNCYXNlVG9rZW5UeXBlc0VudHJ5EgsKA2tleRgBIAEoCRIoCgV2YWx1",
            "ZRgCIAEoCzIZLnRheG9ub215Lm1vZGVsLmNvcmUuQmFzZToCOAEaTwoOQmVo",
            "YXZpb3JzRW50cnkSCwoDa2V5GAEgASgJEiwKBXZhbHVlGAIgASgLMh0udGF4",
            "b25vbXkubW9kZWwuY29yZS5CZWhhdmlvcjoCOAEaWQoTQmVoYXZpb3JHcm91",
            "cHNFbnRyeRILCgNrZXkYASABKAkSMQoFdmFsdWUYAiABKAsyIi50YXhvbm9t",
            "eS5tb2RlbC5jb3JlLkJlaGF2aW9yR3JvdXA6AjgBGlUKEVByb3BlcnR5U2V0",
            "c0VudHJ5EgsKA2tleRgBIAEoCRIvCgV2YWx1ZRgCIAEoCzIgLnRheG9ub215",
            "Lm1vZGVsLmNvcmUuUHJvcGVydHlTZXQ6AjgBGl0KFVRlbXBsYXRlRm9ybXVs",
            "YXNFbnRyeRILCgNrZXkYASABKAkSMwoFdmFsdWUYAiABKAsyJC50YXhvbm9t",
            "eS5tb2RlbC5jb3JlLlRlbXBsYXRlRm9ybXVsYToCOAEaYwoYVGVtcGxhdGVE",
            "ZWZpbml0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRI2CgV2YWx1ZRgCIAEoCzIn",
            "LnRheG9ub215Lm1vZGVsLmNvcmUuVGVtcGxhdGVEZWZpbml0aW9uOgI4ASJC",
            "Cg9UYXhvbm9teVZlcnNpb24SCgoCaWQYASABKAkSDwoHdmVyc2lvbhgCIAEo",
            "CRISCgpzdGF0ZV9oYXNoGAMgASgJIqcBCglIaWVyYXJjaHkSMQoJZnVuZ2li",
            "bGVzGAEgASgLMh4udGF4b25vbXkubW9kZWwuRnVuZ2libGVCcmFuY2gSOAoN",
            "bm9uX2Z1bmdpYmxlcxgCIAEoCzIhLnRheG9ub215Lm1vZGVsLk5vbkZ1bmdp",
            "YmxlQnJhbmNoEi0KB2h5YnJpZHMYAyABKAsyHC50YXhvbm9teS5tb2RlbC5I",
            "eWJyaWRCcmFuY2gieQoMSHlicmlkQnJhbmNoEjAKCGZ1bmdpYmxlGAEgASgL",
            "Mh4udGF4b25vbXkubW9kZWwuRnVuZ2libGVCcmFuY2gSNwoMbm9uX2Z1bmdp",
            "YmxlGAIgASgLMiEudGF4b25vbXkubW9kZWwuTm9uRnVuZ2libGVCcmFuY2gi",
            "awoORnVuZ2libGVCcmFuY2gSLgoKZnJhY3Rpb25hbBgBIAEoCzIaLnRheG9u",
            "b215Lm1vZGVsLkJyYW5jaFJvb3QSKQoFd2hvbGUYAiABKAsyGi50YXhvbm9t",
            "eS5tb2RlbC5CcmFuY2hSb290Ip0BChFOb25GdW5naWJsZUJyYW5jaBIuCgpm",
            "cmFjdGlvbmFsGAEgASgLMhoudGF4b25vbXkubW9kZWwuQnJhbmNoUm9vdBIp",
            "CgV3aG9sZRgCIAEoCzIaLnRheG9ub215Lm1vZGVsLkJyYW5jaFJvb3QSLQoJ",
            "c2luZ2xldG9uGAMgASgLMhoudGF4b25vbXkubW9kZWwuQnJhbmNoUm9vdCJn",
            "ChBCcmFuY2hJZGVudGlmaWVyEj8KDmNsYXNzaWZpY2F0aW9uGAEgASgLMicu",
            "dGF4b25vbXkubW9kZWwuYXJ0aWZhY3QuQ2xhc3NpZmljYXRpb24SEgoKZm9y",
            "bXVsYV9pZBgCIAEoCSKWAgoKQnJhbmNoUm9vdBI7ChFicmFuY2hfaWRlbnRp",
            "ZmllchgBIAEoCzIgLnRheG9ub215Lm1vZGVsLkJyYW5jaElkZW50aWZpZXIS",
            "GQoRcGFyZW50X2Zvcm11bGFfaWQYAiABKAkSDAoEbmFtZRgDIAEoCRI8Cg5i",
            "cmFuY2hfZm9ybXVsYRgEIAEoCzIkLnRheG9ub215Lm1vZGVsLmNvcmUuVGVt",
            "cGxhdGVGb3JtdWxhEjYKCXRlbXBsYXRlcxgFIAEoCzIjLnRheG9ub215Lm1v",
            "ZGVsLmNvcmUuVG9rZW5UZW1wbGF0ZXMSLAoIYnJhbmNoZXMYBiADKAsyGi50",
            "YXhvbm9teS5tb2RlbC5CcmFuY2hSb290QjcKGm9yZy5pd2EudHRmLnRheG9u",
            "b215Lm1vZGVsUAGqAhZJV0EuVFRGLlRheG9ub215Lk1vZGVsYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IWA.TTF.Taxonomy.Model.Core.CoreReflection.Descriptor, global::IWA.TTF.Taxonomy.Model.Artifact.ArtifactReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::IWA.TTF.Taxonomy.Model.Taxonomy), global::IWA.TTF.Taxonomy.Model.Taxonomy.Parser, new[]{ "Version", "BaseTokenTypes", "Behaviors", "BehaviorGroups", "PropertySets", "TemplateFormulas", "TemplateDefinitions", "TokenTemplateHierarchy", "FormulaGrammar" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::IWA.TTF.Taxonomy.Model.TaxonomyVersion), global::IWA.TTF.Taxonomy.Model.TaxonomyVersion.Parser, new[]{ "Id", "Version", "StateHash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IWA.TTF.Taxonomy.Model.Hierarchy), global::IWA.TTF.Taxonomy.Model.Hierarchy.Parser, new[]{ "Fungibles", "NonFungibles", "Hybrids" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IWA.TTF.Taxonomy.Model.HybridBranch), global::IWA.TTF.Taxonomy.Model.HybridBranch.Parser, new[]{ "Fungible", "NonFungible" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IWA.TTF.Taxonomy.Model.FungibleBranch), global::IWA.TTF.Taxonomy.Model.FungibleBranch.Parser, new[]{ "Fractional", "Whole" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IWA.TTF.Taxonomy.Model.NonFungibleBranch), global::IWA.TTF.Taxonomy.Model.NonFungibleBranch.Parser, new[]{ "Fractional", "Whole", "Singleton" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IWA.TTF.Taxonomy.Model.BranchIdentifier), global::IWA.TTF.Taxonomy.Model.BranchIdentifier.Parser, new[]{ "Classification", "FormulaId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::IWA.TTF.Taxonomy.Model.BranchRoot), global::IWA.TTF.Taxonomy.Model.BranchRoot.Parser, new[]{ "BranchIdentifier", "ParentFormulaId", "Name", "BranchFormula", "Templates", "Branches" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///The Taxonomy contains collections of artifacts where each collection is defined in a map with the index being the symbol of the artifact for the collection.
  /// </summary>
  public sealed partial class Taxonomy : pb::IMessage<Taxonomy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Taxonomy> _parser = new pb::MessageParser<Taxonomy>(() => new Taxonomy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Taxonomy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IWA.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Taxonomy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Taxonomy(Taxonomy other) : this() {
      version_ = other.version_ != null ? other.version_.Clone() : null;
      baseTokenTypes_ = other.baseTokenTypes_.Clone();
      behaviors_ = other.behaviors_.Clone();
      behaviorGroups_ = other.behaviorGroups_.Clone();
      propertySets_ = other.propertySets_.Clone();
      templateFormulas_ = other.templateFormulas_.Clone();
      templateDefinitions_ = other.templateDefinitions_.Clone();
      tokenTemplateHierarchy_ = other.tokenTemplateHierarchy_ != null ? other.tokenTemplateHierarchy_.Clone() : null;
      formulaGrammar_ = other.formulaGrammar_ != null ? other.formulaGrammar_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Taxonomy Clone() {
      return new Taxonomy(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private global::IWA.TTF.Taxonomy.Model.TaxonomyVersion version_;
    /// <summary>
    ///Version of the TOM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.TaxonomyVersion Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "base_token_types" field.</summary>
    public const int BaseTokenTypesFieldNumber = 2;
    private static readonly pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.Base>.Codec _map_baseTokenTypes_codec
        = new pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.Base>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::IWA.TTF.Taxonomy.Model.Core.Base.Parser), 18);
    private readonly pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.Base> baseTokenTypes_ = new pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.Base>();
    /// <summary>
    ///Collection of Token Bases
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.Base> BaseTokenTypes {
      get { return baseTokenTypes_; }
    }

    /// <summary>Field number for the "behaviors" field.</summary>
    public const int BehaviorsFieldNumber = 3;
    private static readonly pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.Behavior>.Codec _map_behaviors_codec
        = new pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.Behavior>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::IWA.TTF.Taxonomy.Model.Core.Behavior.Parser), 26);
    private readonly pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.Behavior> behaviors_ = new pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.Behavior>();
    /// <summary>
    ///Collection of Behaviors
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.Behavior> Behaviors {
      get { return behaviors_; }
    }

    /// <summary>Field number for the "behavior_groups" field.</summary>
    public const int BehaviorGroupsFieldNumber = 4;
    private static readonly pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.BehaviorGroup>.Codec _map_behaviorGroups_codec
        = new pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.BehaviorGroup>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::IWA.TTF.Taxonomy.Model.Core.BehaviorGroup.Parser), 34);
    private readonly pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.BehaviorGroup> behaviorGroups_ = new pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.BehaviorGroup>();
    /// <summary>
    ///Collection of BehaviorGroups
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.BehaviorGroup> BehaviorGroups {
      get { return behaviorGroups_; }
    }

    /// <summary>Field number for the "property_sets" field.</summary>
    public const int PropertySetsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.PropertySet>.Codec _map_propertySets_codec
        = new pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.PropertySet>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::IWA.TTF.Taxonomy.Model.Core.PropertySet.Parser), 42);
    private readonly pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.PropertySet> propertySets_ = new pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.PropertySet>();
    /// <summary>
    ///Collection of PropertySets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.PropertySet> PropertySets {
      get { return propertySets_; }
    }

    /// <summary>Field number for the "template_formulas" field.</summary>
    public const int TemplateFormulasFieldNumber = 6;
    private static readonly pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.TemplateFormula>.Codec _map_templateFormulas_codec
        = new pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.TemplateFormula>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::IWA.TTF.Taxonomy.Model.Core.TemplateFormula.Parser), 50);
    private readonly pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.TemplateFormula> templateFormulas_ = new pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.TemplateFormula>();
    /// <summary>
    ///Collection of TemplateFormulas
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.TemplateFormula> TemplateFormulas {
      get { return templateFormulas_; }
    }

    /// <summary>Field number for the "template_definitions" field.</summary>
    public const int TemplateDefinitionsFieldNumber = 7;
    private static readonly pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.TemplateDefinition>.Codec _map_templateDefinitions_codec
        = new pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.TemplateDefinition>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::IWA.TTF.Taxonomy.Model.Core.TemplateDefinition.Parser), 58);
    private readonly pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.TemplateDefinition> templateDefinitions_ = new pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.TemplateDefinition>();
    /// <summary>
    ///Collection of TemplateDefinitions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::IWA.TTF.Taxonomy.Model.Core.TemplateDefinition> TemplateDefinitions {
      get { return templateDefinitions_; }
    }

    /// <summary>Field number for the "token_template_hierarchy" field.</summary>
    public const int TokenTemplateHierarchyFieldNumber = 8;
    private global::IWA.TTF.Taxonomy.Model.Hierarchy tokenTemplateHierarchy_;
    /// <summary>
    ///Visual or logical hierarchy of Templates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.Hierarchy TokenTemplateHierarchy {
      get { return tokenTemplateHierarchy_; }
      set {
        tokenTemplateHierarchy_ = value;
      }
    }

    /// <summary>Field number for the "formula_grammar" field.</summary>
    public const int FormulaGrammarFieldNumber = 9;
    private global::IWA.TTF.Taxonomy.Model.Artifact.FormulaGrammar formulaGrammar_;
    /// <summary>
    ///Global grammar for formula objects.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.Artifact.FormulaGrammar FormulaGrammar {
      get { return formulaGrammar_; }
      set {
        formulaGrammar_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Taxonomy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Taxonomy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Version, other.Version)) return false;
      if (!BaseTokenTypes.Equals(other.BaseTokenTypes)) return false;
      if (!Behaviors.Equals(other.Behaviors)) return false;
      if (!BehaviorGroups.Equals(other.BehaviorGroups)) return false;
      if (!PropertySets.Equals(other.PropertySets)) return false;
      if (!TemplateFormulas.Equals(other.TemplateFormulas)) return false;
      if (!TemplateDefinitions.Equals(other.TemplateDefinitions)) return false;
      if (!object.Equals(TokenTemplateHierarchy, other.TokenTemplateHierarchy)) return false;
      if (!object.Equals(FormulaGrammar, other.FormulaGrammar)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (version_ != null) hash ^= Version.GetHashCode();
      hash ^= BaseTokenTypes.GetHashCode();
      hash ^= Behaviors.GetHashCode();
      hash ^= BehaviorGroups.GetHashCode();
      hash ^= PropertySets.GetHashCode();
      hash ^= TemplateFormulas.GetHashCode();
      hash ^= TemplateDefinitions.GetHashCode();
      if (tokenTemplateHierarchy_ != null) hash ^= TokenTemplateHierarchy.GetHashCode();
      if (formulaGrammar_ != null) hash ^= FormulaGrammar.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (version_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Version);
      }
      baseTokenTypes_.WriteTo(output, _map_baseTokenTypes_codec);
      behaviors_.WriteTo(output, _map_behaviors_codec);
      behaviorGroups_.WriteTo(output, _map_behaviorGroups_codec);
      propertySets_.WriteTo(output, _map_propertySets_codec);
      templateFormulas_.WriteTo(output, _map_templateFormulas_codec);
      templateDefinitions_.WriteTo(output, _map_templateDefinitions_codec);
      if (tokenTemplateHierarchy_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TokenTemplateHierarchy);
      }
      if (formulaGrammar_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FormulaGrammar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (version_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Version);
      }
      baseTokenTypes_.WriteTo(ref output, _map_baseTokenTypes_codec);
      behaviors_.WriteTo(ref output, _map_behaviors_codec);
      behaviorGroups_.WriteTo(ref output, _map_behaviorGroups_codec);
      propertySets_.WriteTo(ref output, _map_propertySets_codec);
      templateFormulas_.WriteTo(ref output, _map_templateFormulas_codec);
      templateDefinitions_.WriteTo(ref output, _map_templateDefinitions_codec);
      if (tokenTemplateHierarchy_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(TokenTemplateHierarchy);
      }
      if (formulaGrammar_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FormulaGrammar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      size += baseTokenTypes_.CalculateSize(_map_baseTokenTypes_codec);
      size += behaviors_.CalculateSize(_map_behaviors_codec);
      size += behaviorGroups_.CalculateSize(_map_behaviorGroups_codec);
      size += propertySets_.CalculateSize(_map_propertySets_codec);
      size += templateFormulas_.CalculateSize(_map_templateFormulas_codec);
      size += templateDefinitions_.CalculateSize(_map_templateDefinitions_codec);
      if (tokenTemplateHierarchy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenTemplateHierarchy);
      }
      if (formulaGrammar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FormulaGrammar);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Taxonomy other) {
      if (other == null) {
        return;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::IWA.TTF.Taxonomy.Model.TaxonomyVersion();
        }
        Version.MergeFrom(other.Version);
      }
      baseTokenTypes_.Add(other.baseTokenTypes_);
      behaviors_.Add(other.behaviors_);
      behaviorGroups_.Add(other.behaviorGroups_);
      propertySets_.Add(other.propertySets_);
      templateFormulas_.Add(other.templateFormulas_);
      templateDefinitions_.Add(other.templateDefinitions_);
      if (other.tokenTemplateHierarchy_ != null) {
        if (tokenTemplateHierarchy_ == null) {
          TokenTemplateHierarchy = new global::IWA.TTF.Taxonomy.Model.Hierarchy();
        }
        TokenTemplateHierarchy.MergeFrom(other.TokenTemplateHierarchy);
      }
      if (other.formulaGrammar_ != null) {
        if (formulaGrammar_ == null) {
          FormulaGrammar = new global::IWA.TTF.Taxonomy.Model.Artifact.FormulaGrammar();
        }
        FormulaGrammar.MergeFrom(other.FormulaGrammar);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (version_ == null) {
              Version = new global::IWA.TTF.Taxonomy.Model.TaxonomyVersion();
            }
            input.ReadMessage(Version);
            break;
          }
          case 18: {
            baseTokenTypes_.AddEntriesFrom(input, _map_baseTokenTypes_codec);
            break;
          }
          case 26: {
            behaviors_.AddEntriesFrom(input, _map_behaviors_codec);
            break;
          }
          case 34: {
            behaviorGroups_.AddEntriesFrom(input, _map_behaviorGroups_codec);
            break;
          }
          case 42: {
            propertySets_.AddEntriesFrom(input, _map_propertySets_codec);
            break;
          }
          case 50: {
            templateFormulas_.AddEntriesFrom(input, _map_templateFormulas_codec);
            break;
          }
          case 58: {
            templateDefinitions_.AddEntriesFrom(input, _map_templateDefinitions_codec);
            break;
          }
          case 66: {
            if (tokenTemplateHierarchy_ == null) {
              TokenTemplateHierarchy = new global::IWA.TTF.Taxonomy.Model.Hierarchy();
            }
            input.ReadMessage(TokenTemplateHierarchy);
            break;
          }
          case 74: {
            if (formulaGrammar_ == null) {
              FormulaGrammar = new global::IWA.TTF.Taxonomy.Model.Artifact.FormulaGrammar();
            }
            input.ReadMessage(FormulaGrammar);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (version_ == null) {
              Version = new global::IWA.TTF.Taxonomy.Model.TaxonomyVersion();
            }
            input.ReadMessage(Version);
            break;
          }
          case 18: {
            baseTokenTypes_.AddEntriesFrom(ref input, _map_baseTokenTypes_codec);
            break;
          }
          case 26: {
            behaviors_.AddEntriesFrom(ref input, _map_behaviors_codec);
            break;
          }
          case 34: {
            behaviorGroups_.AddEntriesFrom(ref input, _map_behaviorGroups_codec);
            break;
          }
          case 42: {
            propertySets_.AddEntriesFrom(ref input, _map_propertySets_codec);
            break;
          }
          case 50: {
            templateFormulas_.AddEntriesFrom(ref input, _map_templateFormulas_codec);
            break;
          }
          case 58: {
            templateDefinitions_.AddEntriesFrom(ref input, _map_templateDefinitions_codec);
            break;
          }
          case 66: {
            if (tokenTemplateHierarchy_ == null) {
              TokenTemplateHierarchy = new global::IWA.TTF.Taxonomy.Model.Hierarchy();
            }
            input.ReadMessage(TokenTemplateHierarchy);
            break;
          }
          case 74: {
            if (formulaGrammar_ == null) {
              FormulaGrammar = new global::IWA.TTF.Taxonomy.Model.Artifact.FormulaGrammar();
            }
            input.ReadMessage(FormulaGrammar);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Support for multiple versions - future use.
  /// </summary>
  public sealed partial class TaxonomyVersion : pb::IMessage<TaxonomyVersion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TaxonomyVersion> _parser = new pb::MessageParser<TaxonomyVersion>(() => new TaxonomyVersion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaxonomyVersion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IWA.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxonomyVersion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxonomyVersion(TaxonomyVersion other) : this() {
      id_ = other.id_;
      version_ = other.version_;
      stateHash_ = other.stateHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxonomyVersion Clone() {
      return new TaxonomyVersion(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///Unique GUID/UUID of the TOM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    /// <summary>
    ///Simple version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state_hash" field.</summary>
    public const int StateHashFieldNumber = 3;
    private string stateHash_ = "";
    /// <summary>
    ///SHA3 Hashed version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateHash {
      get { return stateHash_; }
      set {
        stateHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaxonomyVersion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaxonomyVersion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Version != other.Version) return false;
      if (StateHash != other.StateHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (StateHash.Length != 0) hash ^= StateHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (StateHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StateHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (StateHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StateHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (StateHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaxonomyVersion other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.StateHash.Length != 0) {
        StateHash = other.StateHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            StateHash = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            StateHash = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Logical hierarchy of branches and token templates.
  /// </summary>
  public sealed partial class Hierarchy : pb::IMessage<Hierarchy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Hierarchy> _parser = new pb::MessageParser<Hierarchy>(() => new Hierarchy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hierarchy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IWA.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hierarchy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hierarchy(Hierarchy other) : this() {
      fungibles_ = other.fungibles_ != null ? other.fungibles_.Clone() : null;
      nonFungibles_ = other.nonFungibles_ != null ? other.nonFungibles_.Clone() : null;
      hybrids_ = other.hybrids_ != null ? other.hybrids_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hierarchy Clone() {
      return new Hierarchy(this);
    }

    /// <summary>Field number for the "fungibles" field.</summary>
    public const int FungiblesFieldNumber = 1;
    private global::IWA.TTF.Taxonomy.Model.FungibleBranch fungibles_;
    /// <summary>
    ///Fungible root branch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.FungibleBranch Fungibles {
      get { return fungibles_; }
      set {
        fungibles_ = value;
      }
    }

    /// <summary>Field number for the "non_fungibles" field.</summary>
    public const int NonFungiblesFieldNumber = 2;
    private global::IWA.TTF.Taxonomy.Model.NonFungibleBranch nonFungibles_;
    /// <summary>
    ///non-fungible root branch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.NonFungibleBranch NonFungibles {
      get { return nonFungibles_; }
      set {
        nonFungibles_ = value;
      }
    }

    /// <summary>Field number for the "hybrids" field.</summary>
    public const int HybridsFieldNumber = 3;
    private global::IWA.TTF.Taxonomy.Model.HybridBranch hybrids_;
    /// <summary>
    ///Hybrid root branch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.HybridBranch Hybrids {
      get { return hybrids_; }
      set {
        hybrids_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hierarchy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hierarchy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Fungibles, other.Fungibles)) return false;
      if (!object.Equals(NonFungibles, other.NonFungibles)) return false;
      if (!object.Equals(Hybrids, other.Hybrids)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fungibles_ != null) hash ^= Fungibles.GetHashCode();
      if (nonFungibles_ != null) hash ^= NonFungibles.GetHashCode();
      if (hybrids_ != null) hash ^= Hybrids.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (fungibles_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Fungibles);
      }
      if (nonFungibles_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NonFungibles);
      }
      if (hybrids_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Hybrids);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (fungibles_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Fungibles);
      }
      if (nonFungibles_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NonFungibles);
      }
      if (hybrids_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Hybrids);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fungibles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fungibles);
      }
      if (nonFungibles_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NonFungibles);
      }
      if (hybrids_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hybrids);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hierarchy other) {
      if (other == null) {
        return;
      }
      if (other.fungibles_ != null) {
        if (fungibles_ == null) {
          Fungibles = new global::IWA.TTF.Taxonomy.Model.FungibleBranch();
        }
        Fungibles.MergeFrom(other.Fungibles);
      }
      if (other.nonFungibles_ != null) {
        if (nonFungibles_ == null) {
          NonFungibles = new global::IWA.TTF.Taxonomy.Model.NonFungibleBranch();
        }
        NonFungibles.MergeFrom(other.NonFungibles);
      }
      if (other.hybrids_ != null) {
        if (hybrids_ == null) {
          Hybrids = new global::IWA.TTF.Taxonomy.Model.HybridBranch();
        }
        Hybrids.MergeFrom(other.Hybrids);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (fungibles_ == null) {
              Fungibles = new global::IWA.TTF.Taxonomy.Model.FungibleBranch();
            }
            input.ReadMessage(Fungibles);
            break;
          }
          case 18: {
            if (nonFungibles_ == null) {
              NonFungibles = new global::IWA.TTF.Taxonomy.Model.NonFungibleBranch();
            }
            input.ReadMessage(NonFungibles);
            break;
          }
          case 26: {
            if (hybrids_ == null) {
              Hybrids = new global::IWA.TTF.Taxonomy.Model.HybridBranch();
            }
            input.ReadMessage(Hybrids);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (fungibles_ == null) {
              Fungibles = new global::IWA.TTF.Taxonomy.Model.FungibleBranch();
            }
            input.ReadMessage(Fungibles);
            break;
          }
          case 18: {
            if (nonFungibles_ == null) {
              NonFungibles = new global::IWA.TTF.Taxonomy.Model.NonFungibleBranch();
            }
            input.ReadMessage(NonFungibles);
            break;
          }
          case 26: {
            if (hybrids_ == null) {
              Hybrids = new global::IWA.TTF.Taxonomy.Model.HybridBranch();
            }
            input.ReadMessage(Hybrids);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HybridBranch : pb::IMessage<HybridBranch>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HybridBranch> _parser = new pb::MessageParser<HybridBranch>(() => new HybridBranch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HybridBranch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IWA.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HybridBranch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HybridBranch(HybridBranch other) : this() {
      fungible_ = other.fungible_ != null ? other.fungible_.Clone() : null;
      nonFungible_ = other.nonFungible_ != null ? other.nonFungible_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HybridBranch Clone() {
      return new HybridBranch(this);
    }

    /// <summary>Field number for the "fungible" field.</summary>
    public const int FungibleFieldNumber = 1;
    private global::IWA.TTF.Taxonomy.Model.FungibleBranch fungible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.FungibleBranch Fungible {
      get { return fungible_; }
      set {
        fungible_ = value;
      }
    }

    /// <summary>Field number for the "non_fungible" field.</summary>
    public const int NonFungibleFieldNumber = 2;
    private global::IWA.TTF.Taxonomy.Model.NonFungibleBranch nonFungible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.NonFungibleBranch NonFungible {
      get { return nonFungible_; }
      set {
        nonFungible_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HybridBranch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HybridBranch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Fungible, other.Fungible)) return false;
      if (!object.Equals(NonFungible, other.NonFungible)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fungible_ != null) hash ^= Fungible.GetHashCode();
      if (nonFungible_ != null) hash ^= NonFungible.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (fungible_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Fungible);
      }
      if (nonFungible_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NonFungible);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (fungible_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Fungible);
      }
      if (nonFungible_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NonFungible);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fungible_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fungible);
      }
      if (nonFungible_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NonFungible);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HybridBranch other) {
      if (other == null) {
        return;
      }
      if (other.fungible_ != null) {
        if (fungible_ == null) {
          Fungible = new global::IWA.TTF.Taxonomy.Model.FungibleBranch();
        }
        Fungible.MergeFrom(other.Fungible);
      }
      if (other.nonFungible_ != null) {
        if (nonFungible_ == null) {
          NonFungible = new global::IWA.TTF.Taxonomy.Model.NonFungibleBranch();
        }
        NonFungible.MergeFrom(other.NonFungible);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (fungible_ == null) {
              Fungible = new global::IWA.TTF.Taxonomy.Model.FungibleBranch();
            }
            input.ReadMessage(Fungible);
            break;
          }
          case 18: {
            if (nonFungible_ == null) {
              NonFungible = new global::IWA.TTF.Taxonomy.Model.NonFungibleBranch();
            }
            input.ReadMessage(NonFungible);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (fungible_ == null) {
              Fungible = new global::IWA.TTF.Taxonomy.Model.FungibleBranch();
            }
            input.ReadMessage(Fungible);
            break;
          }
          case 18: {
            if (nonFungible_ == null) {
              NonFungible = new global::IWA.TTF.Taxonomy.Model.NonFungibleBranch();
            }
            input.ReadMessage(NonFungible);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FungibleBranch : pb::IMessage<FungibleBranch>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FungibleBranch> _parser = new pb::MessageParser<FungibleBranch>(() => new FungibleBranch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FungibleBranch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IWA.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FungibleBranch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FungibleBranch(FungibleBranch other) : this() {
      fractional_ = other.fractional_ != null ? other.fractional_.Clone() : null;
      whole_ = other.whole_ != null ? other.whole_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FungibleBranch Clone() {
      return new FungibleBranch(this);
    }

    /// <summary>Field number for the "fractional" field.</summary>
    public const int FractionalFieldNumber = 1;
    private global::IWA.TTF.Taxonomy.Model.BranchRoot fractional_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.BranchRoot Fractional {
      get { return fractional_; }
      set {
        fractional_ = value;
      }
    }

    /// <summary>Field number for the "whole" field.</summary>
    public const int WholeFieldNumber = 2;
    private global::IWA.TTF.Taxonomy.Model.BranchRoot whole_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.BranchRoot Whole {
      get { return whole_; }
      set {
        whole_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FungibleBranch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FungibleBranch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Fractional, other.Fractional)) return false;
      if (!object.Equals(Whole, other.Whole)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fractional_ != null) hash ^= Fractional.GetHashCode();
      if (whole_ != null) hash ^= Whole.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (fractional_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Fractional);
      }
      if (whole_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Whole);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (fractional_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Fractional);
      }
      if (whole_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Whole);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fractional_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fractional);
      }
      if (whole_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Whole);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FungibleBranch other) {
      if (other == null) {
        return;
      }
      if (other.fractional_ != null) {
        if (fractional_ == null) {
          Fractional = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
        }
        Fractional.MergeFrom(other.Fractional);
      }
      if (other.whole_ != null) {
        if (whole_ == null) {
          Whole = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
        }
        Whole.MergeFrom(other.Whole);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (fractional_ == null) {
              Fractional = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(Fractional);
            break;
          }
          case 18: {
            if (whole_ == null) {
              Whole = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(Whole);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (fractional_ == null) {
              Fractional = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(Fractional);
            break;
          }
          case 18: {
            if (whole_ == null) {
              Whole = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(Whole);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NonFungibleBranch : pb::IMessage<NonFungibleBranch>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NonFungibleBranch> _parser = new pb::MessageParser<NonFungibleBranch>(() => new NonFungibleBranch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NonFungibleBranch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IWA.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonFungibleBranch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonFungibleBranch(NonFungibleBranch other) : this() {
      fractional_ = other.fractional_ != null ? other.fractional_.Clone() : null;
      whole_ = other.whole_ != null ? other.whole_.Clone() : null;
      singleton_ = other.singleton_ != null ? other.singleton_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NonFungibleBranch Clone() {
      return new NonFungibleBranch(this);
    }

    /// <summary>Field number for the "fractional" field.</summary>
    public const int FractionalFieldNumber = 1;
    private global::IWA.TTF.Taxonomy.Model.BranchRoot fractional_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.BranchRoot Fractional {
      get { return fractional_; }
      set {
        fractional_ = value;
      }
    }

    /// <summary>Field number for the "whole" field.</summary>
    public const int WholeFieldNumber = 2;
    private global::IWA.TTF.Taxonomy.Model.BranchRoot whole_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.BranchRoot Whole {
      get { return whole_; }
      set {
        whole_ = value;
      }
    }

    /// <summary>Field number for the "singleton" field.</summary>
    public const int SingletonFieldNumber = 3;
    private global::IWA.TTF.Taxonomy.Model.BranchRoot singleton_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.BranchRoot Singleton {
      get { return singleton_; }
      set {
        singleton_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NonFungibleBranch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NonFungibleBranch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Fractional, other.Fractional)) return false;
      if (!object.Equals(Whole, other.Whole)) return false;
      if (!object.Equals(Singleton, other.Singleton)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fractional_ != null) hash ^= Fractional.GetHashCode();
      if (whole_ != null) hash ^= Whole.GetHashCode();
      if (singleton_ != null) hash ^= Singleton.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (fractional_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Fractional);
      }
      if (whole_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Whole);
      }
      if (singleton_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Singleton);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (fractional_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Fractional);
      }
      if (whole_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Whole);
      }
      if (singleton_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Singleton);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fractional_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fractional);
      }
      if (whole_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Whole);
      }
      if (singleton_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Singleton);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NonFungibleBranch other) {
      if (other == null) {
        return;
      }
      if (other.fractional_ != null) {
        if (fractional_ == null) {
          Fractional = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
        }
        Fractional.MergeFrom(other.Fractional);
      }
      if (other.whole_ != null) {
        if (whole_ == null) {
          Whole = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
        }
        Whole.MergeFrom(other.Whole);
      }
      if (other.singleton_ != null) {
        if (singleton_ == null) {
          Singleton = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
        }
        Singleton.MergeFrom(other.Singleton);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (fractional_ == null) {
              Fractional = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(Fractional);
            break;
          }
          case 18: {
            if (whole_ == null) {
              Whole = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(Whole);
            break;
          }
          case 26: {
            if (singleton_ == null) {
              Singleton = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(Singleton);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (fractional_ == null) {
              Fractional = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(Fractional);
            break;
          }
          case 18: {
            if (whole_ == null) {
              Whole = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(Whole);
            break;
          }
          case 26: {
            if (singleton_ == null) {
              Singleton = new global::IWA.TTF.Taxonomy.Model.BranchRoot();
            }
            input.ReadMessage(Singleton);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///Uses classification to represent a branch
  /// </summary>
  public sealed partial class BranchIdentifier : pb::IMessage<BranchIdentifier>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BranchIdentifier> _parser = new pb::MessageParser<BranchIdentifier>(() => new BranchIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BranchIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IWA.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchIdentifier(BranchIdentifier other) : this() {
      classification_ = other.classification_ != null ? other.classification_.Clone() : null;
      formulaId_ = other.formulaId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchIdentifier Clone() {
      return new BranchIdentifier(this);
    }

    /// <summary>Field number for the "classification" field.</summary>
    public const int ClassificationFieldNumber = 1;
    private global::IWA.TTF.Taxonomy.Model.Artifact.Classification classification_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.Artifact.Classification Classification {
      get { return classification_; }
      set {
        classification_ = value;
      }
    }

    /// <summary>Field number for the "formula_id" field.</summary>
    public const int FormulaIdFieldNumber = 2;
    private string formulaId_ = "";
    /// <summary>
    ///Good for visualizations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FormulaId {
      get { return formulaId_; }
      set {
        formulaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BranchIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BranchIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Classification, other.Classification)) return false;
      if (FormulaId != other.FormulaId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (classification_ != null) hash ^= Classification.GetHashCode();
      if (FormulaId.Length != 0) hash ^= FormulaId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (classification_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Classification);
      }
      if (FormulaId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FormulaId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (classification_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Classification);
      }
      if (FormulaId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FormulaId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (classification_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Classification);
      }
      if (FormulaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FormulaId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BranchIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.classification_ != null) {
        if (classification_ == null) {
          Classification = new global::IWA.TTF.Taxonomy.Model.Artifact.Classification();
        }
        Classification.MergeFrom(other.Classification);
      }
      if (other.FormulaId.Length != 0) {
        FormulaId = other.FormulaId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (classification_ == null) {
              Classification = new global::IWA.TTF.Taxonomy.Model.Artifact.Classification();
            }
            input.ReadMessage(Classification);
            break;
          }
          case 18: {
            FormulaId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (classification_ == null) {
              Classification = new global::IWA.TTF.Taxonomy.Model.Artifact.Classification();
            }
            input.ReadMessage(Classification);
            break;
          }
          case 18: {
            FormulaId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BranchRoot : pb::IMessage<BranchRoot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BranchRoot> _parser = new pb::MessageParser<BranchRoot>(() => new BranchRoot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BranchRoot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::IWA.TTF.Taxonomy.Model.TaxonomyReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchRoot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchRoot(BranchRoot other) : this() {
      branchIdentifier_ = other.branchIdentifier_ != null ? other.branchIdentifier_.Clone() : null;
      parentFormulaId_ = other.parentFormulaId_;
      name_ = other.name_;
      branchFormula_ = other.branchFormula_ != null ? other.branchFormula_.Clone() : null;
      templates_ = other.templates_ != null ? other.templates_.Clone() : null;
      branches_ = other.branches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BranchRoot Clone() {
      return new BranchRoot(this);
    }

    /// <summary>Field number for the "branch_identifier" field.</summary>
    public const int BranchIdentifierFieldNumber = 1;
    private global::IWA.TTF.Taxonomy.Model.BranchIdentifier branchIdentifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.BranchIdentifier BranchIdentifier {
      get { return branchIdentifier_; }
      set {
        branchIdentifier_ = value;
      }
    }

    /// <summary>Field number for the "parent_formula_id" field.</summary>
    public const int ParentFormulaIdFieldNumber = 2;
    private string parentFormulaId_ = "";
    /// <summary>
    ///Parent formula idea for walking the tree.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentFormulaId {
      get { return parentFormulaId_; }
      set {
        parentFormulaId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///Name of the branch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "branch_formula" field.</summary>
    public const int BranchFormulaFieldNumber = 4;
    private global::IWA.TTF.Taxonomy.Model.Core.TemplateFormula branchFormula_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.Core.TemplateFormula BranchFormula {
      get { return branchFormula_; }
      set {
        branchFormula_ = value;
      }
    }

    /// <summary>Field number for the "templates" field.</summary>
    public const int TemplatesFieldNumber = 5;
    private global::IWA.TTF.Taxonomy.Model.Core.TokenTemplates templates_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::IWA.TTF.Taxonomy.Model.Core.TokenTemplates Templates {
      get { return templates_; }
      set {
        templates_ = value;
      }
    }

    /// <summary>Field number for the "branches" field.</summary>
    public const int BranchesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::IWA.TTF.Taxonomy.Model.BranchRoot> _repeated_branches_codec
        = pb::FieldCodec.ForMessage(50, global::IWA.TTF.Taxonomy.Model.BranchRoot.Parser);
    private readonly pbc::RepeatedField<global::IWA.TTF.Taxonomy.Model.BranchRoot> branches_ = new pbc::RepeatedField<global::IWA.TTF.Taxonomy.Model.BranchRoot>();
    /// <summary>
    ///Nested branches
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::IWA.TTF.Taxonomy.Model.BranchRoot> Branches {
      get { return branches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BranchRoot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BranchRoot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BranchIdentifier, other.BranchIdentifier)) return false;
      if (ParentFormulaId != other.ParentFormulaId) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(BranchFormula, other.BranchFormula)) return false;
      if (!object.Equals(Templates, other.Templates)) return false;
      if(!branches_.Equals(other.branches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (branchIdentifier_ != null) hash ^= BranchIdentifier.GetHashCode();
      if (ParentFormulaId.Length != 0) hash ^= ParentFormulaId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (branchFormula_ != null) hash ^= BranchFormula.GetHashCode();
      if (templates_ != null) hash ^= Templates.GetHashCode();
      hash ^= branches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (branchIdentifier_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BranchIdentifier);
      }
      if (ParentFormulaId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ParentFormulaId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (branchFormula_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BranchFormula);
      }
      if (templates_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Templates);
      }
      branches_.WriteTo(output, _repeated_branches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (branchIdentifier_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BranchIdentifier);
      }
      if (ParentFormulaId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ParentFormulaId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (branchFormula_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BranchFormula);
      }
      if (templates_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Templates);
      }
      branches_.WriteTo(ref output, _repeated_branches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (branchIdentifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BranchIdentifier);
      }
      if (ParentFormulaId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentFormulaId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (branchFormula_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BranchFormula);
      }
      if (templates_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Templates);
      }
      size += branches_.CalculateSize(_repeated_branches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BranchRoot other) {
      if (other == null) {
        return;
      }
      if (other.branchIdentifier_ != null) {
        if (branchIdentifier_ == null) {
          BranchIdentifier = new global::IWA.TTF.Taxonomy.Model.BranchIdentifier();
        }
        BranchIdentifier.MergeFrom(other.BranchIdentifier);
      }
      if (other.ParentFormulaId.Length != 0) {
        ParentFormulaId = other.ParentFormulaId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.branchFormula_ != null) {
        if (branchFormula_ == null) {
          BranchFormula = new global::IWA.TTF.Taxonomy.Model.Core.TemplateFormula();
        }
        BranchFormula.MergeFrom(other.BranchFormula);
      }
      if (other.templates_ != null) {
        if (templates_ == null) {
          Templates = new global::IWA.TTF.Taxonomy.Model.Core.TokenTemplates();
        }
        Templates.MergeFrom(other.Templates);
      }
      branches_.Add(other.branches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (branchIdentifier_ == null) {
              BranchIdentifier = new global::IWA.TTF.Taxonomy.Model.BranchIdentifier();
            }
            input.ReadMessage(BranchIdentifier);
            break;
          }
          case 18: {
            ParentFormulaId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (branchFormula_ == null) {
              BranchFormula = new global::IWA.TTF.Taxonomy.Model.Core.TemplateFormula();
            }
            input.ReadMessage(BranchFormula);
            break;
          }
          case 42: {
            if (templates_ == null) {
              Templates = new global::IWA.TTF.Taxonomy.Model.Core.TokenTemplates();
            }
            input.ReadMessage(Templates);
            break;
          }
          case 50: {
            branches_.AddEntriesFrom(input, _repeated_branches_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (branchIdentifier_ == null) {
              BranchIdentifier = new global::IWA.TTF.Taxonomy.Model.BranchIdentifier();
            }
            input.ReadMessage(BranchIdentifier);
            break;
          }
          case 18: {
            ParentFormulaId = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (branchFormula_ == null) {
              BranchFormula = new global::IWA.TTF.Taxonomy.Model.Core.TemplateFormula();
            }
            input.ReadMessage(BranchFormula);
            break;
          }
          case 42: {
            if (templates_ == null) {
              Templates = new global::IWA.TTF.Taxonomy.Model.Core.TokenTemplates();
            }
            input.ReadMessage(Templates);
            break;
          }
          case 50: {
            branches_.AddEntriesFrom(ref input, _repeated_branches_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
